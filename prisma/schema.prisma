datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum DocumentOrigin {
  imported
  user_upload
}

model Organizations {
  org_id     String   @id
  name       String
  CIF        String?
  telf_org   String?
  address    String?

  persons    Persons[]
  deals      Deals[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("organizations")
}

model Persons {
  person_id      String   @id
  person_org_id  String?
  first_name     String?
  last_name      String?
  email          String?
  phone          String?

  organization   Organizations? @relation(fields: [person_org_id], references: [org_id])

  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@index([person_org_id])
  @@map("persons")
}

model Deals {
  deal_id         String   @id
  deal_title      String?
  deal_org_id     String?
  training        String?
  hours           Int?     @default(0)
  deal_direction  String?
  sede            String?

  CAES            Boolean? @default(false)
  FUNDAE          Boolean? @default(false)
  Hotel_Night     Boolean? @default(false)
  alumnos         Int?     @default(0)

  organization    Organizations? @relation(fields: [deal_org_id], references: [org_id])
  documents       Documents[]
  comments        Comments[]
  notes           Notes[]
  seassons        Seassons[]

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@index([deal_org_id])
  @@map("deals")
}

model Comments {
  comment_id  String   @id @default(cuid())
  deal_id     String
  author_id   String
  author_name String?
  content     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  deal        Deals    @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade)

  @@index([deal_id])
  @@index([author_id])
  @@map("comments")
}

model Documents {
  doc_id      String         @id @default(cuid())
  deal_id     String
  file_name   String
  file_size   Int
  mime_type   String?
  storage_key String
  origin      DocumentOrigin @default(imported)
  uploaded_by String?
  created_at  DateTime       @default(now())

  deal        Deals          @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade)

  @@index([deal_id])
  @@index([origin])
  @@map("documents")
}

model Notes {
  notes_id     String   @id @default(cuid())
  deal_id      String
  comment_deal String
  created_at   DateTime @default(now())

  deal         Deals    @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade)

  @@index([deal_id])
  @@map("notes")
}

model Seassons {
  seasson_id        String   @id @default(cuid())
  deal_id           String
  status            String?
  date_start        DateTime?
  date_end          DateTime?
  sede              String?
  seasson_address   String?
  seasson_fireman   String?
  seasson_vehicle   String?
  comment_seasson   String?

  deal              Deals    @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade)

  @@index([deal_id])
  @@map("seassons")
}

model Trainers {
  trainer_id String  @id @default(cuid())
  name       String
  email      String?
  phone      String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("trainers")
}

model UnidadesMoviles {
  unidad_id       String  @id @default(cuid())
  name            String?
  plate           String?
  capacity_liters Int?

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("unidades_moviles")
}
