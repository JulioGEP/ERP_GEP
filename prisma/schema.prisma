// prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  engineType    = "library"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
 * Tablas maestras existentes
 * ========================= */

model organizations {
  org_id     String    @id
  name       String
  CIF        String?
  telf_org   String?
  address    String?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  cif        String?
  phone      String?

  persons    persons[]
  deals      deals[]

  @@map("organizations")
}

model persons {
  person_id     String         @id
  person_org_id String?
  first_name    String?
  last_name     String?
  email         String?
  phone         String?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  org_id        String?

  organizations organizations? @relation(fields: [person_org_id], references: [org_id])
  deals         deals[]        @relation("DealPerson")

  @@index([person_org_id])
  @@map("persons")
}

/* =========================
 * Deals (labels y relaciones)
 * ========================= */

model deals {
  deal_id                 String          @id
  title                   String?
  // Labels (no IDs crudos)
  pipeline_label          String?
  training_address_label  String?
  sede_label              String?
  caes_label              String?
  fundae_label            String?
  hotel_label             String?

  // Editables
  hours                   Int?
  alumnos                 Int?

  // Relaciones
  org_id                  String?
  person_id               String?

  organization            organizations?  @relation(fields: [org_id], references: [org_id])
  person                  persons?        @relation("DealPerson", fields: [person_id], references: [person_id])

  products                deal_products[]
  notes                   deal_notes[]
  documents               deal_documents[]

  created_at              DateTime        @default(now())
  updated_at              DateTime        @default(now()) @updatedAt

  @@index([org_id])
  @@index([person_id])
  @@map("deals")
}

/* =========================
 * Productos del deal
 * ========================= */

model deal_products {
  id            String          @id
  deal_id       String
  name          String?
  code          String?
  quantity      Decimal?        @db.Decimal
  price         Decimal?        @db.Decimal
  type          dealproducttype?

  // Nuevos campos
  hours         Int             @default(0)
  comments      String?
  typeLabel     String?
  categoryLabel String?

  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  updated_at    DateTime        @default(now()) @db.Timestamptz(6)

  deal          deals           @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade)

  @@index([deal_id])
  @@index([type])
  @@map("deal_products")
}

/* =========================
 * Notas del deal (Pipedrive)
 * ========================= */

model deal_notes {
  id         String    @id
  deal_id    String
  content    String?
  author     String?
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)

  deal       deals     @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade)

  @@index([deal_id])
  @@map("deal_notes")
}

/* =========================
 * Documentos unificados
 * ========================= */

model deal_documents {
  id          String         @id
  deal_id     String
  source      DocumentSource
  name        String
  mime_type   String?
  size        Int?
  external_id String?        // id en origen; en S3 es la storage key
  url         String?        // Pipedrive puede traer URL directa

  created_at  DateTime       @default(now()) @db.Timestamptz(6)
  updated_at  DateTime       @default(now()) @db.Timestamptz(6)

  deal        deals          @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade)

  @@index([deal_id])
  @@map("deal_documents")
}

/* =========================
 * Otros existentes (no usados ahora, se pueden limpiar m√°s adelante)
 * ========================= */

model trainers {
  trainer_id String   @id
  name       String
  email      String?
  phone      String?
  created_at DateTime @default(now())
  updated_at DateTime

  @@map("trainers")
}

model unidades_moviles {
  unidad_id       String   @id
  name            String?
  plate           String?
  capacity_liters Int?
  created_at      DateTime @default(now())
  updated_at      DateTime

  @@map("unidades_moviles")
}

/* =========================
 * Enums
 * ========================= */

enum dealproducttype {
  TRAINING
  EXTRA

  @@map("dealproducttype")
}

enum DocumentSource {
  PIPEDRIVE
  S3

  @@map("document_source")
}
