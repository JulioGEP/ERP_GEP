// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * Nota de alineación:
 * - organizations/persons/deals usan timestamps SIN TZ -> @db.Timestamp(6)
 * - deal_products/deal_notes/deal_files usan timestamptz -> @db.Timestamptz(6)
 * - deal_products.type en DB es un ENUM (dealproducttype). Lo mapeamos como Unsupported
 * para no forzar los valores mientras cerramos el modelo de negocio.
 */

model organizations {
  /// Clave primaria (TEXT)
  org_id  String  @id
  name    String
  // En Neon existen CIF (mayúscula) y cif (minúscula). Nos quedamos con `cif`.
  cif     String?
  address String?
  phone   String?

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  // Relaciones
  persons persons[]
  deals   deals[]
}

model persons {
  person_id  String  @id
  first_name String?
  last_name  String?
  email      String?
  phone      String?

  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  // Clave foránea real en Neon
  org_id       String?
  organization organizations? @relation(fields: [org_id], references: [org_id])

  // Relaciones inversas
  deals deals[]

  @@index([org_id], map: "idx_persons_org_id")
}

model deals {
  deal_id    String   @id
  alumnos    Int      @default(0)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)

  title            String?
  org_id           String? // En Neon ya convertido a TEXT
  pipeline_id      String?
  training_address String?
  sede_label       String?
  caes_label       String?
  fundae_label     String?
  hotel_label      String?
  person_id        String?
  hours            String?

  // Relaciones
  organization organizations? @relation(fields: [org_id], references: [org_id])
  person       persons?       @relation(fields: [person_id], references: [person_id])

  deal_products deal_products[]
  deal_notes    deal_notes[]
  deal_files    deal_files[]

  @@index([org_id], map: "idx_deals_org_id")
  @@index([person_id], map: "idx_deals_person_id")
}

model deal_products {
  id      String  @id
  deal_id String?

  name String?
  code String?

  quantity Decimal? @db.Decimal(12, 3)
  price    Decimal? @db.Decimal(12, 2)

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  // ENUM en DB -> mantenemos como Unsupported para no romper migraciones
  type             Unsupported("dealproducttype")?
  hours            String?
  product_comments String?
  category         String?

  // Relación
  deal deals? @relation(fields: [deal_id], references: [deal_id])

  @@index([deal_id], map: "idx_deal_products_deal_id")
}

model deal_notes {
  id         String  @id
  deal_id    String?
  product_id String?

  content String?
  author  String?

  created_at DateTime @db.Timestamptz(6)
  updated_at DateTime @db.Timestamptz(6)

  // Relación
  deal deals? @relation(fields: [deal_id], references: [deal_id])

  @@index([deal_id], map: "idx_deal_notes_deal_id")
}

model deal_files {
  id        String  @id
  deal_id   String?
  file_name String?
  file_url  String?
  file_type String?

  added_at   DateTime? @db.Timestamptz(6)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @default(now()) @db.Timestamptz(6)

  // Relación
  deal deals? @relation(fields: [deal_id], references: [deal_id])

  @@index([deal_id], map: "idx_deal_files_deal_id")
}
