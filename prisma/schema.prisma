generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model organizations {
  /// Clave primaria (TEXT)
  org_id     String    @id
  name       String
  address    String?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  cif        String?
  phone      String?
  deals      deals[]
  persons    persons[]
}

model persons {
  person_id    String         @id
  first_name   String?
  last_name    String?
  email        String?
  phone        String?
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now())
  org_id       String?
  deals        deals[]
  organization organizations? @relation(fields: [org_id], references: [org_id], map: "persons_org_fk")

  @@index([org_id], map: "idx_persons_org_id")
}

model deals {
  deal_id          String                 @id
  created_at       DateTime               @default(now())
  updated_at       DateTime               @default(now())
  title            String?
  org_id           String?
  pipeline_id      String?
  training_address String?
  sede_label       String?
  caes_label       String?
  fundae_label     String?
  hotel_label      String?
  person_id        String?
  transporte       String?                @db.VarChar(10)
  po               String?                @db.VarChar(191)
  tipo_servicio    String?                @db.VarChar(50)
  mail_invoice     String?                @db.VarChar(255)
  comments         comments[]
  deal_files       deal_files[]
  deal_notes       deal_notes[]
  deal_products    deal_products[]
  organization     organizations?         @relation(fields: [org_id], references: [org_id], map: "deals_org_fk")
  person           persons?               @relation(fields: [person_id], references: [person_id], map: "deals_person_fk")
  seassons         seassons[]
  sessions         sessions[]
  session_comments sesiones_comentarios[]
  session_files        session_files[]
  alumnos              alumnos[]
  session_public_links session_public_links[]

  @@index([org_id], map: "idx_deals_org_id")
  @@index([person_id], map: "idx_deals_person_id")
}

model deal_products {
  id               String     @id
  deal_id          String?
  name             String?
  code             String?
  quantity         Decimal    @db.Decimal(10, 0)
  price            Decimal    @db.Decimal(12, 2)
  created_at       DateTime   @default(now()) @db.Timestamptz(6)
  updated_at       DateTime   @default(now()) @db.Timestamptz(6)
  type             String?
  hours            Decimal?   @db.Decimal(10, 0)
  product_comments String?
  category         String?
  deal             deals?     @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade, map: "deal_products_deal_fk")
  sessions         sessions[]

  @@index([deal_id], map: "idx_deal_products_deal_id")
  @@index([deal_id])
  @@index([type])
}

model deal_notes {
  id         String    @id
  deal_id    String?
  content    String?
  author     String?
  created_at DateTime? @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deal       deals?    @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade, map: "deal_notes_deal_fk")

  @@index([deal_id], map: "idx_deal_notes_deal_id")
}

model deal_files {
  id                  String    @id
  deal_id             String?
  file_name           String?
  file_url            String?
  file_type           String?
  drive_file_name     String?
  drive_web_view_link String?
  added_at            DateTime? @db.Timestamptz(6)
  created_at          DateTime  @default(now()) @db.Timestamptz(6)
  updated_at          DateTime  @default(now()) @db.Timestamptz(6)
  deal                deals?    @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade, map: "deal_files_deal_fk")

  @@index([deal_id], map: "idx_deal_files_deal_id")
}

model comments {
  comment_id  String   @id
  deal_id     String
  author_id   String
  author_name String?
  content     String
  created_at  DateTime @default(now())
  updated_at  DateTime
  deals       deals    @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade)

  @@index([author_id])
  @@index([deal_id])
}

model seassons {
  seasson_id      String    @id
  deal_id         String
  status          String?
  date_start      DateTime?
  date_end        DateTime?
  sede            String?
  seasson_address String?
  seasson_fireman String?
  seasson_vehicle String?
  comment_seasson String?
  deals           deals     @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade)

  @@index([deal_id])
}

model trainers {
  trainer_id   String   @id
  name         String
  email        String?  @unique
  phone        String?
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @updatedAt @db.Timestamptz(6)
  activo       Boolean  @default(true)
  apellido     String?
  dni          String?  @unique
  direccion    String?
  especialidad String?
  titulacion   String?

  session_trainers session_trainers[]

  @@index([apellido])
  @@index([especialidad])
}

model salas {
  sala_id String @id @map("id")
  name    String
  sede    String

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  sessions sessions[]
}

model unidades_moviles {
  unidad_id  String   @id
  name       String
  matricula  String   @unique
  tipo       String[] @default([])
  sede       String[] @default([])
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  session_unidades session_unidades[]
}

model sessions {
  id               String        @id @default(uuid())
  deal_id          String
  deal_product_id  String
  nombre_cache     String
  fecha_inicio_utc DateTime?     @db.Timestamptz(6)
  fecha_fin_utc    DateTime?     @db.Timestamptz(6)
  sala_id          String?
  direccion        String
  comentarios      String?
  created_at       DateTime      @default(now()) @db.Timestamptz(6)
  updated_at       DateTime      @updatedAt @db.Timestamptz(6)
  estado           SessionEstado @default(BORRADOR)

  deal          deals                  @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade)
  deal_product  deal_products          @relation(fields: [deal_product_id], references: [id], onDelete: Cascade)
  sala          salas?                 @relation(fields: [sala_id], references: [sala_id])
  trainers      session_trainers[]
  unidades      session_unidades[]
  comments      sesiones_comentarios[]
  session_files        session_files[]
  alumnos              alumnos[]
  public_links         session_public_links[]

  @@index([deal_id], map: "idx_sesiones_deal_id")
  @@index([deal_product_id], map: "idx_sesiones_deal_product_id")
  @@index([sala_id], map: "idx_sesiones_sala_id")
  @@map("sesiones")
}

model sesiones_comentarios {
  id         BigInt   @id @default(autoincrement())
  deal_id    String
  sesion_id  String   @db.Uuid
  content    String
  author     String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  deal    deals?    @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade, map: "session_comments_deal_fk")
  session sessions? @relation(fields: [sesion_id], references: [id], onDelete: Cascade, map: "session_comments_session_fk")

  @@index([deal_id], map: "idx_session_comments_deal_id")
  @@index([sesion_id], map: "idx_session_comments_sesion_id")
  @@map("sesiones_comentarios")
}

model session_files {
  id                  String   @id @default(uuid())
  deal_id             String
  sesion_id           String   @db.Uuid
  file_type           String   @db.VarChar(10)
  compartir_formador  Boolean  @default(false)
  added_at            DateTime @default(now()) @db.Timestamptz(6)
  updated_at          DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  drive_file_name     String
  drive_web_view_link String?

  deal    deals    @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade, map: "session_files_deal_fk")
  session sessions @relation(fields: [sesion_id], references: [id], onDelete: Cascade, map: "session_files_session_fk")

  @@unique([sesion_id, drive_file_name], map: "session_files_skey")
  @@index([deal_id], map: "idx_session_files_deal_id")
  @@index([sesion_id], map: "idx_session_files_sesion_id")
  @@index([added_at], map: "idx_session_files_added_at")
  @@map("sesion_files")
}

model alumnos {
  id          String   @id @default(uuid()) @db.Uuid
  deal_id     String
  sesion_id   String   @db.Uuid
  nombre      String
  apellido    String
  dni         String
  apto        Boolean  @default(false)
  certificado Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt @db.Timestamptz(6)

  deal    deals?    @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade, map: "alumnos_deal_fk")
  session sessions? @relation(fields: [sesion_id], references: [id], onDelete: Cascade, map: "alumnos_session_fk")

  @@unique([sesion_id, dni], map: "ux_alumnos_sesion_dni")
  @@index([deal_id], map: "idx_alumnos_deal_id")
  @@index([apellido], map: "idx_alumnos_apellido")
  @@index([dni], map: "idx_alumnos_dni")
  @@map("alumnos")
}

model session_public_links {
  id               String   @id @default(uuid()) @db.Uuid
  deal_id          String
  sesion_id        String   @db.Uuid
  token            String   @db.VarChar(128)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  expires_at       DateTime @db.Timestamptz(6)
  revoked_at       DateTime? @db.Timestamptz(6)
  last_access_at   DateTime? @db.Timestamptz(6)
  last_access_ip   String?   @db.VarChar(64)
  last_access_ua   String?   @db.VarChar(512)

  deal    deals    @relation(fields: [deal_id], references: [deal_id], onDelete: Cascade, map: "session_public_links_deal_fk")
  session sessions @relation(fields: [sesion_id], references: [id], onDelete: Cascade, map: "session_public_links_session_fk")

  @@unique([token], map: "ux_session_public_links_token")
  @@index([deal_id], map: "idx_session_public_links_deal_id")
  @@index([sesion_id], map: "idx_session_public_links_sesion_id")
  @@map("session_public_links")
}

enum SessionEstado {
  BORRADOR
  PLANIFICADA
  SUSPENDIDA
  CANCELADA
  FINALIZADA
}

model session_trainers {
  session_id String   @map("sesion_id")
  trainer_id String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  session sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)
  trainer trainers @relation(fields: [trainer_id], references: [trainer_id], onDelete: Cascade)

  @@id([session_id, trainer_id])
  @@index([trainer_id], map: "idx_sesion_trainers_trainer_id")
  @@map("sesion_trainers")
}

model session_unidades {
  session_id String   @map("sesion_id")
  unidad_id  String   @map("unidad_movil_id")
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  session sessions         @relation(fields: [session_id], references: [id], onDelete: Cascade)
  unidad  unidades_moviles @relation(fields: [unidad_id], references: [unidad_id], onDelete: Cascade)

  @@id([session_id, unidad_id])
  @@index([unidad_id], map: "idx_sesion_unidades_unidad_movil_id")
  @@map("sesion_unidades")
}

enum DocumentOrigin {
  imported
  user_upload
}

enum dealproducttype {
  TRAINING
  EXTRA
}
